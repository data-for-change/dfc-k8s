apiVersion: apps/v1
kind: Deployment
metadata:
  name: vault
spec:
  selector:
    matchLabels:
      app: vault
  replicas: 1
  revisionHistoryLimit: 5
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: vault
    spec:
      terminationGracePeriodSeconds: 30
      containers:
        - name: vault
          # pulled June 26, 2022
          image: vault@sha256:d45ffca3b9bc5f15f665c0afb581de668bca935ff1fffa10049648183c80ef6f
          resources: {{ .Values.resources }}
          args:
            - server
          ports:
            - containerPort: 8200
          env:
            - name: VAULT_LOCAL_CONFIG
              value: '{"backend": {"file": {"path": "/var/vault/file"}}, "listener": {"tcp": {"address": "0.0.0.0:8200", "tls_disable": 1}}, "api_addr": "http://127.0.0.1:8200", "ui": true}'
            - name: UNSEAL_KEYS
              valueFrom: {"secretKeyRef": {"name": "vault-unseal", "key": "UNSEAL_KEYS"}}
          volumeMounts:
            - name: vaultdata
              mountPath: /var/vault
              subPath: vaultdata
          securityContext:
            privileged: true
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  SEALED="$(vault status --address=http://localhost:8200 --format=yaml | grep sealed)" &&\
                  if [ "${SEALED}" == "sealed: true" ]; then
                    for KEY in $UNSEAL_KEYS; do
                      vault operator unseal --address=http://localhost:8200 $KEY
                    done
                    exit 0
                  elif [ "${SEALED}" == "sealed: false" ]; then
                    exit 0
                  else
                    exit 1
                  fi
            initialDelaySeconds: 1
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 5
      volumes:
        - name: vaultdata
          persistentVolumeClaim:
            claimName: vault
